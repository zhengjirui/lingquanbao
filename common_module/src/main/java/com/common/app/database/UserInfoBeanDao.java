package com.common.app.database;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.common.app.database.bean.UserInfoBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_INFO_BEAN".
*/
public class UserInfoBeanDao extends AbstractDao<UserInfoBean, String> {

    public static final String TABLENAME = "USER_INFO_BEAN";

    /**
     * Properties of entity UserInfoBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Phone = new Property(0, String.class, "phone", true, "PHONE");
        public final static Property Photo = new Property(1, String.class, "photo", false, "PHOTO");
        public final static Property CreateTime = new Property(2, long.class, "createTime", false, "CREATE_TIME");
        public final static Property CreateTimeStr = new Property(3, String.class, "createTimeStr", false, "CREATE_TIME_STR");
        public final static Property CustomerServiceId = new Property(4, String.class, "customerServiceId", false, "CUSTOMER_SERVICE_ID");
        public final static Property Id = new Property(5, String.class, "id", false, "ID");
        public final static Property IsActiveStatus = new Property(6, int.class, "isActiveStatus", false, "IS_ACTIVE_STATUS");
        public final static Property LastProductId = new Property(7, String.class, "lastProductId", false, "LAST_PRODUCT_ID");
        public final static Property OpenImPassword = new Property(8, String.class, "openImPassword", false, "OPEN_IM_PASSWORD");
        public final static Property Password = new Property(9, String.class, "password", false, "PASSWORD");
        public final static Property SafeToken = new Property(10, String.class, "safeToken", false, "SAFE_TOKEN");
        public final static Property SignedStatus = new Property(11, int.class, "signedStatus", false, "SIGNED_STATUS");
        public final static Property Status = new Property(12, int.class, "status", false, "STATUS");
        public final static Property SuperiorId = new Property(13, int.class, "superiorId", false, "SUPERIOR_ID");
        public final static Property VerifiCode = new Property(14, int.class, "verifiCode", false, "VERIFI_CODE");
        public final static Property IsLogin = new Property(15, boolean.class, "isLogin", false, "IS_LOGIN");
        public final static Property FirstLoginFlag = new Property(16, String.class, "firstLoginFlag", false, "FIRST_LOGIN_FLAG");
    }


    public UserInfoBeanDao(DaoConfig config) {
        super(config);
    }
    
    public UserInfoBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_INFO_BEAN\" (" + //
                "\"PHONE\" TEXT PRIMARY KEY NOT NULL UNIQUE ," + // 0: phone
                "\"PHOTO\" TEXT," + // 1: photo
                "\"CREATE_TIME\" INTEGER NOT NULL ," + // 2: createTime
                "\"CREATE_TIME_STR\" TEXT," + // 3: createTimeStr
                "\"CUSTOMER_SERVICE_ID\" TEXT," + // 4: customerServiceId
                "\"ID\" TEXT," + // 5: id
                "\"IS_ACTIVE_STATUS\" INTEGER NOT NULL ," + // 6: isActiveStatus
                "\"LAST_PRODUCT_ID\" TEXT," + // 7: lastProductId
                "\"OPEN_IM_PASSWORD\" TEXT," + // 8: openImPassword
                "\"PASSWORD\" TEXT," + // 9: password
                "\"SAFE_TOKEN\" TEXT," + // 10: safeToken
                "\"SIGNED_STATUS\" INTEGER NOT NULL ," + // 11: signedStatus
                "\"STATUS\" INTEGER NOT NULL ," + // 12: status
                "\"SUPERIOR_ID\" INTEGER NOT NULL ," + // 13: superiorId
                "\"VERIFI_CODE\" INTEGER NOT NULL ," + // 14: verifiCode
                "\"IS_LOGIN\" INTEGER NOT NULL ," + // 15: isLogin
                "\"FIRST_LOGIN_FLAG\" TEXT);"); // 16: firstLoginFlag
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_INFO_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserInfoBean entity) {
        stmt.clearBindings();
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(1, phone);
        }
 
        String photo = entity.getPhoto();
        if (photo != null) {
            stmt.bindString(2, photo);
        }
        stmt.bindLong(3, entity.getCreateTime());
 
        String createTimeStr = entity.getCreateTimeStr();
        if (createTimeStr != null) {
            stmt.bindString(4, createTimeStr);
        }
 
        String customerServiceId = entity.getCustomerServiceId();
        if (customerServiceId != null) {
            stmt.bindString(5, customerServiceId);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(6, id);
        }
        stmt.bindLong(7, entity.getIsActiveStatus());
 
        String lastProductId = entity.getLastProductId();
        if (lastProductId != null) {
            stmt.bindString(8, lastProductId);
        }
 
        String openImPassword = entity.getOpenImPassword();
        if (openImPassword != null) {
            stmt.bindString(9, openImPassword);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(10, password);
        }
 
        String safeToken = entity.getSafeToken();
        if (safeToken != null) {
            stmt.bindString(11, safeToken);
        }
        stmt.bindLong(12, entity.getSignedStatus());
        stmt.bindLong(13, entity.getStatus());
        stmt.bindLong(14, entity.getSuperiorId());
        stmt.bindLong(15, entity.getVerifiCode());
        stmt.bindLong(16, entity.getIsLogin() ? 1L: 0L);
 
        String firstLoginFlag = entity.getFirstLoginFlag();
        if (firstLoginFlag != null) {
            stmt.bindString(17, firstLoginFlag);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserInfoBean entity) {
        stmt.clearBindings();
 
        String phone = entity.getPhone();
        if (phone != null) {
            stmt.bindString(1, phone);
        }
 
        String photo = entity.getPhoto();
        if (photo != null) {
            stmt.bindString(2, photo);
        }
        stmt.bindLong(3, entity.getCreateTime());
 
        String createTimeStr = entity.getCreateTimeStr();
        if (createTimeStr != null) {
            stmt.bindString(4, createTimeStr);
        }
 
        String customerServiceId = entity.getCustomerServiceId();
        if (customerServiceId != null) {
            stmt.bindString(5, customerServiceId);
        }
 
        String id = entity.getId();
        if (id != null) {
            stmt.bindString(6, id);
        }
        stmt.bindLong(7, entity.getIsActiveStatus());
 
        String lastProductId = entity.getLastProductId();
        if (lastProductId != null) {
            stmt.bindString(8, lastProductId);
        }
 
        String openImPassword = entity.getOpenImPassword();
        if (openImPassword != null) {
            stmt.bindString(9, openImPassword);
        }
 
        String password = entity.getPassword();
        if (password != null) {
            stmt.bindString(10, password);
        }
 
        String safeToken = entity.getSafeToken();
        if (safeToken != null) {
            stmt.bindString(11, safeToken);
        }
        stmt.bindLong(12, entity.getSignedStatus());
        stmt.bindLong(13, entity.getStatus());
        stmt.bindLong(14, entity.getSuperiorId());
        stmt.bindLong(15, entity.getVerifiCode());
        stmt.bindLong(16, entity.getIsLogin() ? 1L: 0L);
 
        String firstLoginFlag = entity.getFirstLoginFlag();
        if (firstLoginFlag != null) {
            stmt.bindString(17, firstLoginFlag);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public UserInfoBean readEntity(Cursor cursor, int offset) {
        UserInfoBean entity = new UserInfoBean( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // phone
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // photo
            cursor.getLong(offset + 2), // createTime
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // createTimeStr
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // customerServiceId
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // id
            cursor.getInt(offset + 6), // isActiveStatus
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // lastProductId
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // openImPassword
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // password
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // safeToken
            cursor.getInt(offset + 11), // signedStatus
            cursor.getInt(offset + 12), // status
            cursor.getInt(offset + 13), // superiorId
            cursor.getInt(offset + 14), // verifiCode
            cursor.getShort(offset + 15) != 0, // isLogin
            cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16) // firstLoginFlag
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserInfoBean entity, int offset) {
        entity.setPhone(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setPhoto(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setCreateTime(cursor.getLong(offset + 2));
        entity.setCreateTimeStr(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCustomerServiceId(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setId(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setIsActiveStatus(cursor.getInt(offset + 6));
        entity.setLastProductId(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setOpenImPassword(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setPassword(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setSafeToken(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setSignedStatus(cursor.getInt(offset + 11));
        entity.setStatus(cursor.getInt(offset + 12));
        entity.setSuperiorId(cursor.getInt(offset + 13));
        entity.setVerifiCode(cursor.getInt(offset + 14));
        entity.setIsLogin(cursor.getShort(offset + 15) != 0);
        entity.setFirstLoginFlag(cursor.isNull(offset + 16) ? null : cursor.getString(offset + 16));
     }
    
    @Override
    protected final String updateKeyAfterInsert(UserInfoBean entity, long rowId) {
        return entity.getPhone();
    }
    
    @Override
    public String getKey(UserInfoBean entity) {
        if(entity != null) {
            return entity.getPhone();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserInfoBean entity) {
        return entity.getPhone() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
